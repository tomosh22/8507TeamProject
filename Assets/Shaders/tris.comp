#version 430 core
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;//todo change work groups
layout(r8, binding = 0) uniform image1D tex;

struct Triangle{
	vec3 a;
	vec3 b;
	vec3 c;
};

struct Edge{
	vec3 a;
	vec3 b;
};

uniform vec3 point;

layout(std430, binding = 5) buffer TriangleSSBO{
	Triangle triangles[];
};
layout(std430, binding = 6) buffer TriangleBoolSSBO{
	bool triangleBools[];
};

bool TriangleIsHit(int index){
	Triangle tri = triangles[index];
	return tri.a.x > tri.a.y || point.x == -1;//just to test im passing data in properly
}

Edge GetClosestEdge(int index){
	Triangle tri = triangles[index];
	float furthestDistance = 0.;
	int furthestVert = -1;
	float newDistance;
	for(int i = 0;i < 3;i++){
		switch(i){
		case 0:
			newDistance = length(tri.a-point);
			if(newDistance > furthestDistance){
				furthestVert = i;
				furthestDistance = newDistance;
			}
			break;
		case 1:
			newDistance = length(tri.b-point);
			if(newDistance > furthestDistance){
				furthestVert = i;
				furthestDistance = newDistance;
			}
			break;
		case 2:
			newDistance = length(tri.c-point);
			if(newDistance > furthestDistance){
				furthestVert = i;
				furthestDistance = newDistance;
			}
			break;
		}
	}
	Edge edge;
	switch (furthestVert){
	case 0:
		edge.a = tri.b;
		edge.b = tri.c;
		break;
	case 1:
		edge.a = tri.c;
		edge.b = tri.a;
		break;
	case 2:
		edge.a = tri.a;
		edge.b = tri.b;
	}
	return edge;

}

void main() {
	int id = int(gl_GlobalInvocationID.x);
	triangleBools[id] = TriangleIsHit(id);
	return;
}