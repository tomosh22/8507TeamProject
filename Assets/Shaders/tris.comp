#version 430 core
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;//todo change work groups
layout(	rgba16f, binding = 0) uniform image1D triDataTex;
layout(	r8, binding = 1) uniform image2D outputTex;

uniform vec3 sphereCenter;
uniform float sphereRadius;

struct Triangle{
	float ax,ay,az,au,av;
	float bx,by,bz,bu,bv;
	float cx,cy,cz,cu,cv;
};

struct Edge{
	vec3 a;
	vec3 b;
};

uniform vec3 point;

layout(std430, binding = 5) buffer TriangleSSBO{
	Triangle triangles[];
};
layout(std430, binding = 6) buffer TriangleBoolSSBO{
	bool triangleBools[];
};


float GetAreaFromTriangleVerts(vec3 a, vec3 b, vec3 c) {
	return 0.5 * (a.x * b.y + b.x * c.y + c.x * a.y - a.x * c.y - c.x * b.y - b.x * a.y);
}

vec3 WorldSpaceToBarycentricCoords(vec3 point, vec3 vertA, vec3 vertB, vec3 vertC) {
	vec3 barycentric;
	double totalArea = GetAreaFromTriangleVerts(vertA, vertB, vertC);
	barycentric.x = float(GetAreaFromTriangleVerts(point, vertB, vertC) / totalArea);
	barycentric.y = float(GetAreaFromTriangleVerts(vertA, point, vertC) / totalArea);
	barycentric.z = float(GetAreaFromTriangleVerts(vertA, vertB, point) / totalArea);
	return barycentric;
}

vec2 BarycentricToUV(vec3 barycentric, vec2 uvA, vec2 uvB, vec2 uvC){
    vec2 uv = vec2(0);
    uv += uvA * barycentric.x;
    uv += uvB * barycentric.y;
    uv += uvC * barycentric.z;
    return uv;
}

bool sphereTriangleIntersection(vec3 sphereCenter, float sphereRadius,
                                vec3 v0, vec3 v1, vec3 v2,
                                out vec3 intersectionPoint)
{
    
    vec3 triangleNormal = normalize(cross(v1 - v0, v2 - v0));

    // Compute the distance of the sphere center to the triangle plane
    float distance = dot(triangleNormal, sphereCenter - v0);

    // Check if the sphere is behind or too far away from the triangle
    if (distance > sphereRadius || distance < -sphereRadius)
        return false;

    // Compute the projection of the sphere center onto the triangle plane
    vec3 projection = sphereCenter - distance * triangleNormal;

    // Check if the projection is inside the triangle
    vec3 edge0 = v1 - v0;
    vec3 vp0 = projection - v0;
    if (dot(triangleNormal, cross(edge0, vp0)) < 0)
        return false;

    vec3 edge1 = v2 - v1;
    vec3 vp1 = projection - v1;
    if (dot(triangleNormal, cross(edge1, vp1)) < 0)
        return false;

    vec3 edge2 = v0 - v2;
    vec3 vp2 = projection - v2;
    if (dot(triangleNormal, cross(edge2, vp2)) < 0)
        return false;

    // Compute the intersection point
    float t = sphereRadius * sphereRadius - (length(sphereCenter - projection)) * 
              (length(sphereCenter - projection));

    //if (t < 0) return false;

    //intersectionPoint = projection - triangleNormal * sqrt(t);
    intersectionPoint = projection;

    return true;
}



void main() {
	int id = int(gl_GlobalInvocationID.x);

    
    Triangle tri = triangles[id];
    vec3 intersectionPoint;

    vec3 triA = vec3(tri.ax,tri.ay,tri.az);
    vec3 triB = vec3(tri.bx,tri.by,tri.bz);
    vec3 triC = vec3(tri.cx,tri.cy,tri.cz);

    vec2 uvA = vec2(tri.au,tri.av);
    vec2 uvB = vec2(tri.bu,tri.bv);
    vec2 uvC = vec2(tri.cu,tri.cv);
    

    if(sphereTriangleIntersection(sphereCenter,sphereRadius,triA,triB,triC,intersectionPoint)){
    	vec3 barycentric = WorldSpaceToBarycentricCoords(intersectionPoint,triA,triB,triC);
        vec2 uv = BarycentricToUV(barycentric, uvA, uvB, uvC);
        ivec2 IMAGE_COORDS = ivec2(uv.x * 1000,uv.y * 1000);
    	imageStore(triDataTex,id,vec4(uv,0,1));
        //imageStore(triDataTex,id,vec4(0,0,1,1));//debugging
        for(int x = -20; x < 21;x++){
            for(int y = -20; y < 21; y++){
                imageStore(outputTex,IMAGE_COORDS + ivec2(x,y),vec4(1));
            }
        }
        
    }
    else{
    	imageStore(triDataTex,id,vec4(1,0,0,1));
    }
   
    
    return;
}